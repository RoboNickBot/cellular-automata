module Main (main) where

import Control.Comonad
import System.Exit
import Data.List (intersperse)

import Data.Cellular
import Data.Cellular.Universe.Chessboard
import Data.Cellular.Automaton.Conway

import Data.Cellular.UStack (C (C), mkList)

main = do let init = vis fpent
              end = (vis (head (drop 30 (iterate next fpent))))
          putStrLn init
          putStrLn ""
          putStrLn end
          if end == step30
             then return ()
             else do putStrLn ""
                     putStrLn step30
                     die "Conway test did not match"

fpent :: Chessboard Conway
fpent = initPattern Death Life [here, northeast, north, west, south]

vis :: Chessboard Conway -> String
vis = concat . intersperse "\n"
      . map (map (\c -> case c of
                          C Life -> 'o'
                          C Death -> '.')) 
      . map (mkList 20) 
      . (mkList 20)

step30 = ".........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.................oooo....................\n\
          \........oo......oo...o...................\n\
          \.......o.o......o...oo...................\n\
          \......oo.o.......oo......................\n\
          \.......oo................................\n\
          \........o........ooo.....................\n\
          \................oo.......................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \.........................................\n\
          \........................................."

-- uni2 :: U2 Conway
-- uni2 = (extend up . poke down . extend right . poke left . poke down . poke left . poke up)
--          (uniform Off)
         
-- uni2 :: U2 Conway
-- poke = set On

-- vis :: U2 Conway -> String
-- vis = concat . intersperse "\n"
--       . map (map (\c -> case c of
--                           C On -> 'o'
--                           C Off -> '.')) 
--       . map (mkList 20) 
--       . (mkList 20)
